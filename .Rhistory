data <- read.csv("https://www.kaggle.com/datasets/aungpyaeap/supermarket-sales")
View(data)
library(readr)
data <- read_csv("input/supermarket_sales - Sheet1.csv")
View(data)
data <- read.csv("https://www.ine.cl/docs/default-source/uso-del-tiempo-tiempo-libre/bbdd/documentos/base_datos_enut_csv.zip?sfvrsn=b399edf0_5")
data <- read.csv(url("https://www.ine.cl/docs/default-source/uso-del-tiempo-tiempo-libre/bbdd/documentos/base_datos_enut_csv.zip?sfvrsn=b399edf0_5"))
data <- read.csv2(url("https://www.ine.cl/docs/default-source/uso-del-tiempo-tiempo-libre/bbdd/documentos/base_datos_enut_csv.zip?sfvrsn=b399edf0_5"))
## Explorar datos
dim(data)
View(data)
names(data)
table(data$`gross margin percentage`)
# 3. Selección de variables
#Mediante la función `select` de `dplyr`, seleccionamos cada una de nuestras variables de interés y creamos una nueva base con el nombre `ene_proc`, donde "proc" hace referencia a base procesada:
proc <- select(data, #base original
tipo_cliente = 4, #Tipo de cliente
p_unitario = 7,
unidades = 8,
puntaje = 17,
ing_bruto = 16)
library(dplyr)
# 3. Selección de variables
#Mediante la función `select` de `dplyr`, seleccionamos cada una de nuestras variables de interés y creamos una nueva base con el nombre `ene_proc`, donde "proc" hace referencia a base procesada:
proc <- select(data, #base original
tipo_cliente = 4, #Tipo de cliente
p_unitario = 7,
unidades = 8,
puntaje = 17,
ing_bruto = 16)
#Para saber las variables que contiene una base utilizamos `names`
names(proc)
View(proc)
table(proc$tipo_cliente)
table(data$Gender)
nulo = lm(ing_bruto ~ 1, proc)
cor(proc %>% select(p_unitario, unidades, ing_bruto))
cor(proc %>% select(p_unitario, unidades, ing_bruto, puntaje))
cor(proc %>% select(ing_bruto, p_unitario, unidades, puntaje))
library(sjPlot)
sjPlot::plot_scatter(proc, ing_bruto, p_unitario)
?plot_scatter
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
unidades,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
puntaje,
fit.line = "lm")
summary(nulo)
m1 = lm(ing_bruto ~ p_unitario, proc)
summary(m01)
m01 = lm(ing_bruto ~ p_unitario, proc)
summary(m01)
m02 = lm(ing_bruto ~ unidades, proc)
summary(m01)
View(proc)
summary(m02)
m03 = lm(ing_bruto ~ puntaje, proc)
summary(m03)
m4 = lm(ing_bruto ~ tipo_cliente, proc)
summary(m04)
m04 = lm(ing_bruto ~ tipo_cliente, proc)
summary(m04)
names(data)
# 3. Selección de variables
#Mediante la función `select` de `dplyr`, seleccionamos cada una de nuestras variables de interés y creamos una nueva base con el nombre `ene_proc`, donde "proc" hace referencia a base procesada:
proc <- select(data, #base original
tipo_cliente = 4, #Tipo de cliente
genero = 5, #Género
p_unitario = 7, #Precio unitario
unidades = 8, #Unidades vendidas
puntaje = 17, #Puntaje del cliente
ing_bruto = 16) #Ingresos brutos
proc %>%
group_by(tipo_cliente) %>%
summarise(media = mean(ing_bruto)) %>%
ungroup()
proc %>%
group_by(genero) %>%
summarise(media = mean(ing_bruto)) %>%
ungroup()
m05 = lm(ing_bruto ~ genero, proc)
summary(m05)
m06 = lm(ing_bruto ~ p_unitario + unidads + puntaje + tipo_cliente + genero, proc)
m06 = lm(ing_bruto ~ p_unitario + unidades + puntaje + tipo_cliente + genero, proc)
summary(m06)
m07 = lm(ing_bruto ~ p_unitario*unidades + puntaje + tipo_cliente + genero, proc)
summary(m07)
m07 = lm(ing_bruto ~ p_unitario + puntaje + tipo_cliente + unidades*genero, proc)
m08 = lm(ing_bruto ~ p_unitario + puntaje + tipo_cliente + unidades*genero, proc)
summary(m08)
summary(m08)
m09 = lm(ing_bruto ~ p_unitario + unidades + puntaje^2 + tipo_cliente + genero, proc)
summary(m09)
m09 = lm(ing_bruto ~ p_unitario + unidades + puntaje^2 + tipo_cliente + genero, proc)
summary(m09)
summary(m06)
proc$puntaje2 = (proc$puntaje)^2
m09 = lm(ing_bruto ~ p_unitario + unidades + puntaje2 + tipo_cliente + genero, proc)
summary(m09)
summary(m09)
summary(m06)
sjPlot::plot_scatter(proc,
ing_bruto,
puntaje2,
fit.line = "lm")
proc$puntaje_log = log(proc$puntaje)
sjPlot::plot_scatter(proc,
ing_bruto,
puntaje_log,
fit.line = "lm")
proc$p_unitario2 = (proc$p_unitario)^2
sjPlot::plot_scatter(proc,
ing_bruto,
puntaje2,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario2,
fit.line = "lm")
m09 = lm(ing_bruto ~ p_unitario + unidades + p_unitario2 + tipo_cliente + genero, proc)
summary(m09)
proc$p_unitario_log = log(proc$p_unitario)
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario_log,
fit.line = "lm")
m10 = lm(ing_bruto ~ p_unitario + unidades + p_unitario_log + tipo_cliente + genero, proc)
summary(m10)
m09 = lm(ing_bruto ~ p_unitario2 + unidades + tipo_cliente + genero, proc)
summary(m09)
proc$p_unitario_log = log(proc$p_unitario)
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario_log,
fit.line = "lm")
m10 = lm(ing_bruto ~ p_unitario_log + unidades + tipo_cliente + genero, proc)
summary(m10)
library("sjPlot")
library(performance)
library(dplyr)
library(readr)
data <- read_csv("input/supermarket_sales - Sheet1.csv")
View(data)
# 3. Selección de variables
#Mediante la función `select` de `dplyr`, seleccionamos cada una de nuestras variables de interés y creamos una nueva base con el nombre `ene_proc`, donde "proc" hace referencia a base procesada:
proc <- select(data, #base original
tipo_cliente = 4, #Tipo de cliente
genero = 5, #Género
p_unitario = 7, #Precio unitario
unidades = 8, #Unidades vendidas
puntaje = 17, #Puntaje del cliente
ing_bruto = 16) #Ingresos brutos
# 4. Crear modelos --------------------------------------------------------
m01 = lm(ing_bruto ~ p_unitario, proc)
m02 = lm(ing_bruto ~ unidades, proc)
names(proc)
m03 = lm(ing_bruto ~ p_unitario + unidades + puntaje + genero + tipo_cliente, proc)
summary(m01, m02, m03)
summary(c(m01, m02, m03))
summary(c(m01, m02, m03))
summary(list(m01, m02, m03))
summary(m01)$r.squared
summary(m01)$r.squared
summary(m01)$r.squared
summary(m01)$r.squared
summary(m01)$adj.r.squared
summary(m01)$adj.r.squared
summary(m01)$adj.r.squared
summary(m01)$r.squared
summary(m02)$r.squared
summary(m03)$r.squared
summary(m01)$adj.r.squared
summary(m02)$adj.r.squared
summary(m03)$adj.r.squared
x <- summary(m03)
View(x)
pred <- fitter(m03) #Valores predichos
pred <- fitted(m03) #Valores predichos
obs <- proc$ing_bruto #Valores observados
res = residuals(m03)#Residuos
lineal = data.frame(obs, pred, res)
plot(lineal$res, lineal$pred)
plot(lineal$res, lineal$pred)
## Test homogeneidad de varianza -------------------------------------------
check_heteroscedasticity(m03)
# no varían homogéneamente
plot(m03)
## Normalidad de residuos --------------------------------------------------
check_normality(m03) #Test Saphiro-Wilk
qqnorm(lineal$res, pch = 1)
qqline(lineal$res, col = "steelblue", lwd = 2)
check_collinearity(mod)
check_collinearity(m03)
# Independencia de residuos -----------------------------------------------
check_autocorrelation(m03) #Durbin-Watson
# Residuos independientes y no autocorrelacionados
durbinWatsonTest(lineal$res) #https://www.investopedia.com/terms/d/durbin-watson-statistic.asp
## Casos influyentes -------------------------------------------------------
plot(check_outliers(mod))
## Casos influyentes -------------------------------------------------------
check_outliers(m03)
plot(check_outliers(m03))
plot(lineal$res, lineal$pred)
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario,
fit.line = "lm")
proc$p_unitario2 = (proc$p_unitario)^2
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario2,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario2,
fit.line = "lm")
proc$p_unitario_log = log(proc$p_unitario)
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario_log,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario,
fit.line = "lm")
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario_log,
fit.line = "lm")
check_model(m03)
check_model(model1, check = c("ncv", "linearity"))
check_model(m03, check = c("ncv", "linearity"))
proc$p_unitario_log = log(proc$p_unitario)
sjPlot::plot_scatter(proc,
ing_bruto,
p_unitario_log,
fit.line = "lm")
m04 = lm(ing_bruto ~ p_unitario_log + unidades + puntaje + genero + tipo_cliente, proc)
check_model(m04, check = c("ncv", "linearity"))
## Normalidad de residuos --------------------------------------------------
check_normality(m04) #Test Saphiro-Wilk
qqnorm(residuals(m03), pch = 1)
qqline(residuals(m03), col = "steelblue", lwd = 2)
